require 'colorize'
require_relative 'erros.rb'

class Peca

  attr_reader :posicao, :color

  def initialize(tabuleiro, color, posicao)
    @tabuleiro, @color, @posicao = tabuleiro, color, posicao

    tabuleiro.lugar_peca(self, @posicao)
    @promover = false
  end

  #Cria uma c√≥pia da pe√ßa no tabuleiro passado como argumento. Se a pe√ßa original foi promovida, a pe√ßa duplicada tamb√©m √© promovida.
  def copia(tabuleiro)
    nova_peca = Peca.new(tabuleiro, color, posicao)
    nova_peca.promover if promovida?
    nova_peca
  end

  #Retorna todos os movimentos v√°lidos que a pe√ßa pode fazer, considerando deslizamentos e saltos.
  def mov_validos
    todos_movimentos = movimentos(:slide) + movimentos(:jump)
    todos_movimentos.select { |mover| realizar_deslizamento(mover) || realizar_salto(mover) }
  end

  #Realiza um deslizamento da pe√ßa para a posi√ß√£o pos_deslizar se for v√°lido.
  def realizar_deslizamento(pos_deslizar)
    return false unless pos_deslizar_valida?(pos_deslizar)

    @tabuleiro.remover_peca(posicao)
    @posicao = pos_deslizar
    @tabuleiro.lugar_peca(self, pos_deslizar)
    promover if promovivel? && !promovida?
    true
  end

  #Realiza um salto da pe√ßa para a posi√ß√£o pos_pulo se for v√°lido.
  def realizar_salto(pos_pulo)
    return false unless pos_pulo_valida?(pos_pulo)
    pos_adjacente = pos_adjacente(pos_pulo)

    # Verifica se a posi√ß√£o de destino est√° livre
    return false unless @tabuleiro[pos_pulo].nil?

    @tabuleiro.remover_peca(posicao)
    @tabuleiro.remover_peca(pos_adjacente)
    @tabuleiro.lugar_peca(self, pos_pulo)
    @posicao = pos_pulo
    promover if promovivel? && !promovida?
    true
  end

  #Retorna a representa√ß√£o visual da pe√ßa como uma string colorida, usando um s√≠mbolo diferente para pe√ßas promovidas e n√£o promovidas.
  def render
    simbolo = promovida? ? "üÖö" : "‚¨§ "
    simbolo.colorize(color)
  end

  private

  #Verifica se a posi√ß√£o passada como argumento est√° dentro dos limites do tabuleiro.
  def no_tabuleiro?(posicao)
    posicao.all? { |i| i.between?(0, 7) }
  end

  #Retorna todas as posi√ß√µes poss√≠veis de movimento (deslizamento ou salto) para a pe√ßa, considerando a dire√ß√£o e dist√¢ncia.
  def movimentos(mover)
    multiplicador = mover == :slide ? 1 : 2
    x, y = posicao
    movimentos = diferencas_movimenta√ß√£o.map do |dx, dy|
      [x + dx * multiplicador, y + dy * multiplicador]
    end
    movimentos.select { |mover| @tabuleiro.no_tabuleiro?(mover) }
  end

  #Retorna as diferen√ßas de movimento para a pe√ßa, dependendo se ela est√° promovida e de sua cor.
  def diferencas_movimenta√ß√£o
    diferencas = [[1, 1], [1, -1]]
    diferencas += diferencas.map{ |linha| [linha.first * -1, linha.last] } if promovida?
    diferencas.map! { |linha| [linha.first * -1, linha.last] } if color == :white
    diferencas
  end

  #Retorna a posi√ß√£o adjacente entre a posi√ß√£o atual da pe√ßa e a posi√ß√£o pos_pulo.
  def pos_adjacente(pos_pulo)
    [(posicao.first + pos_pulo.first) / 2, (posicao.last + pos_pulo.last) / 2]
  end

  #Verifica se a posi√ß√£o de deslizamento √© v√°lida, ou seja, se a posi√ß√£o est√° entre os movimentos poss√≠veis de
  # deslizamento e se a posi√ß√£o est√° vazia.
  def pos_deslizar_valida?(pos_deslizar)
    movimentos(:slide).include?(pos_deslizar) && @tabuleiro[pos_deslizar].nil?
  end

  #Verifica se a posi√ß√£o de salto √© v√°lida, considerando a dire√ß√£o do movimento, se a pe√ßa est√° se movendo na diagonal,
  # se est√° na dire√ß√£o correta e se h√° uma pe√ßa advers√°ria na dire√ß√£o e a posi√ß√£o de destino est√° livre.
  def pos_pulo_valida?(pos_pulo)
    direcao = [(pos_pulo.first - posicao.first) <=> 0, (pos_pulo.last - posicao.last) <=> 0]

    # Verifica se a pe√ßa est√° se movendo na diagonal
    return false unless (pos_pulo.first - posicao.first).abs == (pos_pulo.last - posicao.last).abs

    # Verifica se a pe√ßa est√° se movendo na dire√ß√£o correta
    return false if !promovida? && color == :white && direcao.first != -1
    return false if !promovida? && color == :red && direcao.first != 1

    # Verifica se a pe√ßa √© comum e est√° tentando se mover mais de duas casas
    if color == :red
      return false if !promovida? && (pos_pulo.first - posicao.first).abs > 2
    end
    # Verifica se h√° uma pe√ßa advers√°ria na dire√ß√£o e se a posi√ß√£o de destino est√° livre
    pos_atual = [posicao.first + direcao.first, posicao.last + direcao.last]
    tem_oponente = false

    while no_tabuleiro?(pos_atual) && pos_atual != pos_pulo
      if @tabuleiro[pos_atual] && @tabuleiro[pos_atual].color != self.color
        return false if tem_oponente # N√£o pode capturar mais de uma pe√ßa advers√°ria
        tem_oponente = true if !tem_oponente && @tabuleiro[pos_atual].color != self.color
      elsif @tabuleiro[pos_atual]
        return false # Pe√ßa da mesma cor no caminho
      end
      pos_atual = [pos_atual.first + direcao.first, pos_atual.last + direcao.last]
    end

    # Para pe√ßas n√£o promovidas, verifica se h√° um oponente, caso contr√°rio, retorna verdadeiro
    return tem_oponente if !promovida?

    # Para pe√ßas promovidas (dama), permite movimentos livres na diagonal, mas verifica se a captura √© v√°lida quando h√° um oponente
    if tem_oponente
      pos_adjacente = pos_adjacente(pos_pulo)
      return false if @tabuleiro[pos_adjacente] && @tabuleiro[pos_adjacente].color == self.color # Pe√ßa da mesma cor no caminho
      return @tabuleiro[pos_pulo].nil? # A posi√ß√£o de destino deve estar livre
    else
      return true
    end
  end

  protected

  #Promove a pe√ßa, definindo o atributo @promover como verdadeiro.
  def promover
    @promover = true
  end

  #Retorna verdadeiro se a pe√ßa estiver promovida, caso contr√°rio, retorna falso.
  def promovida?
    @promover
  end

  #Verifica se a pe√ßa √© promov√≠vel, ou seja, se est√° na √∫ltima linha do tabuleiro, dependendo de sua cor.
  def promovivel?
    linha = posicao.first
    color == :white ? linha == 0 : linha == 7
  end

end
